}
install.packages("bookdown")
devtools::install_github("lpandersson/uppsaladown")
remove.packages("uppsaladown")
if (!require("devtools")) {
install.packages("devtools", repos = "http://cran.rstudio.org")
}
install.packages("bookdown")
devtools::install_github("lpandersson/uppsaladown")
chtree <- function(bulbs = TRUE, snow = TRUE, star = TRUE, bg.col = 1){
set.seed(1)
p <- points
r <- runif
l <- 500
s <- (l:1)/1000
par(bg = bg.col, pch = 8, mar = rep(0, 4))
plot(0, xlim = c(-1.25, 1.25), axes = F, xlab = "", ylab = "", ylim = c(-100, 550))
a <- 0
rect(-0.1, -100, 0.1, 0, col = "brown", border = "brown")
if(isTRUE(star)) {
# Star glow
for(i in 11:1){
points(0.005, 500.2, pch = 19, col = rgb(1, 1, 0, 0.05), cex = 5 + (0.65 * i))
}
}
# Tree
for(i in rep(exp(-(1:125)* 0.016), 4) * s + s){
a <- a + 1
for(j in seq(-i, i, 0.02)){
p(j, a, col = rgb(0, i*.7 + 0.2 * r(1, 0.6, 1) - 0.5 * j^2, 0))
}
}
if(isTRUE(bulbs)) {
# Christmas bulbs
cols <- sample(c(rgb(1, 0, 0, 0.1), rgb(0, 1, 0, 0.1), rgb(1, 1, 0, 0.1), rgb(0, 0.2, 1, 0.1)))
cols2 <- sample(c(rgb(1, 0, 0, 0.1), rgb(0, 1, 0, 0.1), rgb(1, 1, 0, 0.1), rgb(0, 0.2, 1, 0.1)))
cols3 <- sample(c(rgb(1, 0, 0, 0.1), rgb(0, 1, 0, 0.1), rgb(1, 1, 0, 0.1), rgb(0, 0.2, 1, 0.1)))
cols4 <- sample(c(rgb(1, 0, 0, 0.1), rgb(0, 1, 0, 0.1), rgb(1, 1, 0, 0.1), rgb(0, 0.2, 1, 0.1)))
for(i in 11:1){
points(seq(-1, 1, 0.1), rep(0, 21), pch = 19, col = cols, cex = 0.15 + (0.12 * i))
points(seq(-0.75, 0.75, 0.1), rep(125, 16), pch = 19, cex = 0.15 + (0.12 * i), col = cols2)
points(seq(-0.5, 0.5, 0.1), rep(250, 11), pch = 19, cex = 0.15 + (0.12 * i), col = cols3)
points(seq(-0.25, 0.25, 0.1), rep(375, 6), pch = 19, cex = 0.15 + (0.12 * i), col = cols4)
}
set.seed(60)
points(runif(6, -0.77, 0.77), runif(6, 0, 100), pch = 21, cex = 3, bg = sample(c("gold", "red")))
set.seed(2)
points(runif(7, -0.5, 0.5), runif(7, 125, 300), pch = 21, cex = 3, bg = sample(c("gold", "red")))
set.seed(5)
points(runif(4, -0.2, 0.2), runif(4, 300, 370), pch = 21, cex = 3, bg = sample(c("gold", "red")))
points(0, 140, pch = 21, cex = 3, bg = sample(c("gold", "red")))
points(-0.15, 180, pch = 21, cex = 3, bg = sample(c("gold", "red")))
}
if(isTRUE(star)) {
# Star
points(0.006, 508, pch = 19, col = 7, cex = 5.6)
p(0, 520, pch = "⭐", cex = 13, col = 7)
}
if(isTRUE(snow)) {
# Snow
p(r(75, -1.25, 1.25), r(75, -100, l+50), col = "white", cex = sample(seq(0.5, 1.2, length.out = 75)), pch = "❄️")
p(r(100, -1.25, 1.25), r(100, -100, -95), col = "white", cex = sample(seq(0.5, 1.2, length.out = 75)), pch = "❄️")
}
}
chtree()
3.03/2.78
lambda_hat <- 638/240
p_hat <- exp(-lambda_hat)
p_hat - 1.96*sqrt(lambda_hat^3*exp(-2*lambda_hat))
p_hat - 1.96*sqrt(lambda_hat^3*exp(-2*lambda_hat))/sqrt(240)
p_hat + 1.96*sqrt(lambda_hat^3*exp(-2*lambda_hat))/sqrt(240)
17*7
4/5-17*7/30/5
1/150
(3.03/2.78)^2
p_hat
xbar = 1.89
n <- 100
p0 <- 0.5
phat = 1/xhat
phat = 1/xbar
2*(log(1-phat)*(xbar-1) + log(phat))
2*(log(1-p0)*(xbar-1) + log(0))
2*(log(1-p0)*(xbar-1) + log(p0))
1/xhat
phat
2*(2.620096-2.613691)
2*(2.620-2.613)
qchisq(0.95,1)
1.96^2
sqrt(0.53^2*(1-0.53)/100)
n*(log(1-phat)*(xbar-1) + log(phat))
n*(log(1-p0)*(xbar-1) + log(p0))
2*(131.0048 - 130.6845)
0.03/0.03633497
0.8256509^2
qnorm(1-0.05/2)
sqrt(0.64)
a <- 2; b <- 3
a
b
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
cbp1 <- c("#999999", "#E69F00", "#56B4E9", "#009E73",
"#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot() +
geom_function(aes(color = "in"), fun = function(x){1/sqrt(x/5)}, size = 1) +
geom_function(aes(color = "gen"), fun = function(x){sqrt(x/5)}, size = 1) +
geom_function(aes(color = "out"), fun = function(x){1/sqrt(x/5)+sqrt(x/5)}, size = 1) +
xlim(1, 15) +
scale_colour_manual(name = "",
values = c("in" = cbp1[2], "gen" = cbp1[3], "out" = cbp1[4]),
labels = c("generalization","in-sample",  "out-of-sample")) +
labs(x = "model complexity", y = "error") +
theme_minimal(base_size = 20)
library(StMoMo)
library(tidyverse)
library(demography)
source("log_scores.R")
setwd("~/Library/CloudStorage/Box-Box/research/mortalityForecasting2_1/momo")
source("log_scores.R")
load("SWdata.dat")
#Load data
SWdata <- hmd.mx(
country = "SWE",
username = 'patrik.andersson@statistics.uu.se',
password = 'zebzib-ruvzuh-qijgU3',
label = "Sweden"
)
SWdata
save(SWdata, file = "SWdata.dat")
case = action
save(SWdata, file = "SWdata.dat")
load("SWdata.dat")
hmd.mx
readHMDweb
readHMDweb
install.packages("HMDHFDplus")
HMDHFDplus
readHMDweb
readHMDweb()
library(HMDHFDplus)
readHMDweb
library(StMoMo)
library(tidyverse)
library(demography)
source("log_scores.R")
load("SWdata.dat")
SWStMoMo <- StMoMoData(SWdata, series = "male")
SWStMoMo$Dxt <- floor(SWStMoMo$Dxt)
first_year <- 1930
View(SWdata)
SWdata$year
SWdata$year[length(SWdata$year)]
last_year <- 2021
start_years = first_year:( last_year - train_length - forecast_length + 1)
first_year <- 1930
train_length <- 60
forecast_length <- 10
last_year <- 2021
start_years = first_year:( last_year - train_length - forecast_length + 1)
log_scores <- array(data = NA, dim = c(length(start_years), forecast_length))
log_score_fcn <- log_score_LC
for (start_year_idx in seq_along(start_years)) {
log_scores[start_year_idx,] <- log_score_fcn(
SWStMoMo,
start_years[start_year_idx],
start_years[start_year_idx] + train_length - 1,
10    )
}
log_scores
df <- tibble()
df <- df %>% add_row(x = 3, y = 4)
df <- tibble(x = numeric(), y = numeric())
df <- df %>% add_row(x = 3, y = 4)
df
df <- df %>% add_row(x = 5, y = 3)
df
df <- tibble(x = char(), y = numeric())
df <- tibble(x = character(), y = numeric())
df <- df %>% add_row(x = '5', y = 3)
df
Sys.date()
Sys.ate()
Sys.Date()
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%D/%M%Y")
format(Sys.time(), "%D/%M / %Y")
format(Sys.time(), "%D/%M/%Y")
format(Sys.time(), "%d/%M/%Y")
format(Sys.time(), "%ss:%mm/%hh")
format(Sys.time(), "%s:%m/%h")
format(Sys.time(), "%a:%b/%d")
ormat(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%X")
log_scores <- log_score_fcn(
SWStMoMo,
start_years[start_year_idx],
start_years[start_year_idx] + train_length - 1,
10    )
log_scores
df
df <- tibble(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
Forecast horizon = numeric(),
df <- tibble(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
'Forecast horizon' = numeric(),
'Log score'' = numeric(),
Date = character(),
Time = character()
)
load("SWdata.dat")
SWStMoMo <- StMoMoData(SWdata, series = "male")
SWStMoMo$Dxt <- floor(SWStMoMo$Dxt)
#Calculate average log-score
first_year <- 1920
train_length <- 60
forecast_length <- 10
last_year <- 2021
start_years = first_year:( last_year - train_length - forecast_length + 1)
log_scores <- array(data = NA, dim = c(length(start_years), forecast_length))
log_score_fcn <- log_score_LC
for (start_year_idx in seq_along(start_years)) {
log_scores <- log_score_fcn(
SWStMoMo,
start_years[start_year_idx],
start_years[start_year_idx] + train_length - 1,
10    )
for count in 1:length(log_scores){
df <- df %>% add_row(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
Forecast horizon = numeric(),
Log score = numeric(),
Date = character(),
Time = character()
)
}
}
colMeans(log_scores)
mean(log_scores)
df <- tibble(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
'Forecast horizon' = numeric(),
'Log score' = numeric(),
Date = character(),
Time = character()
)
df
country <- 'sweden'
sex <- 'Male'
model <- 'LC'
nn_layers <- 'NA'
latent_dim <- 'NA'
max_age <- 100
country <- 'sweden'
sex <- 'Male'
model <- 'LC'
nn_layers <- 'NA'
latent_dim <- 'NA'
max_age <- 100
df <- tibble(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
'Forecast horizon' = numeric(),
'Log score' = numeric(),
Date = character(),
Time = character()
)
load("SWdata.dat")
SWStMoMo <- StMoMoData(SWdata, series = "male")
SWStMoMo$Dxt <- floor(SWStMoMo$Dxt)
first_year <- 1920
train_length <- 60
forecast_length <- 10
last_year <- 2021
start_years = first_year:( last_year - train_length - forecast_length + 1)
log_scores <- array(data = NA, dim = c(length(start_years), forecast_length))
log_score_fcn <- log_score_LC
for (start_year_idx in seq_along(start_years)) {
log_scores <- log_score_fcn(
SWStMoMo,
start_years[start_year_idx],
start_years[start_year_idx] + train_length - 1,
10    )
for(fcast_horizon in 1:length(log_scores)){
df <- df %>% add_row(
Country = country,
first_year_train = start_years[start_year_idx],
last_year_train = start_years[start_year_idx] + train_length - 1,
Sex = sex ,
max_age = max_age,
nn_layers = nn_layers,
latent_dim = latent_dim,
'Forecast horizon' = fcast_horizon,
'Log score' = log_scores[fcast_horizon],
Date = format(Sys.time(), "%d/%M/%Y"),
Time = format(Sys.time(), "%X")
)
}
}
log_scores
country
nn_layers
nn_layers <- 0
latent_dim <- 0
for(fcast_horizon in 1:length(log_scores)){
df <- df %>% add_row(
Country = country,
first_year_train = start_years[start_year_idx],
last_year_train = start_years[start_year_idx] + train_length - 1,
Sex = sex ,
max_age = max_age,
nn_layers = nn_layers,
latent_dim = latent_dim,
'Forecast horizon' = fcast_horizon,
'Log score' = log_scores[fcast_horizon],
Date = format(Sys.time(), "%d/%M/%Y"),
Time = format(Sys.time(), "%X")
)
df
for(fcast_horizon in 1:length(log_scores)){
df <- df %>% add_row(
Country = country,
first_year_train = start_years[start_year_idx],
last_year_train = start_years[start_year_idx] + train_length - 1,
Sex = sex ,
max_age = max_age,
nn_layers = nn_layers,
latent_dim = latent_dim,
'Forecast horizon' = fcast_horizon,
'Log score' = log_scores[fcast_horizon],
Date = format(Sys.time(), "%d/%M/%Y"),
Time = format(Sys.time(), "%X")
)
}
df
df
df <- tibble(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
'Forecast horizon' = numeric(),
'Log score' = numeric(),
Date = character(),
Time = character()
)
load("SWdata.dat")
SWStMoMo <- StMoMoData(SWdata, series = "male")
SWStMoMo$Dxt <- floor(SWStMoMo$Dxt)
first_year <- 1920
train_length <- 60
forecast_length <- 10
last_year <- 2021
start_years = first_year:( last_year - train_length - forecast_length + 1)
log_score_fcn <- log_score_LC
model <- 'LC'
start_years
start_years = first_year:( last_year - train_length - forecast_length + 1)
log_score_fcn <- log_score_LC
model <- 'LC'
a <- 0
print(a)
log_score_fcn <- log_score_LC
model <- 'LC'
for (start_year_idx in seq_along(start_years)) {
print(start_year_idx)
log_scores <- log_score_fcn(
SWStMoMo,
start_years[start_year_idx],
start_years[start_year_idx] + train_length - 1,
10    )
for(fcast_horizon in 1:length(log_scores)){
df <- df %>% add_row(
Country = country,
first_year_train = start_years[start_year_idx],
last_year_train = start_years[start_year_idx] + train_length - 1,
Sex = sex ,
max_age = max_age,
nn_layers = nn_layers,
latent_dim = latent_dim,
'Forecast horizon' = fcast_horizon,
'Log score' = log_scores[fcast_horizon],
Date = format(Sys.time(), "%d/%M/%Y"),
Time = format(Sys.time(), "%X")
)
}
}
df <- tibble(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
'Forecast horizon' = numeric(),
'Log score' = numeric(),
Date = character(),
Time = character()
)
load("SWdata.dat")
SWStMoMo <- StMoMoData(SWdata, series = "male")
SWStMoMo$Dxt <- floor(SWStMoMo$Dxt)
first_year <- 1920
train_length <- 60
forecast_length <- 10
last_year <- 2021
start_years = first_year:( last_year - train_length - forecast_length + 1)
log_score_fcn <- log_score_LC
model <- 'LC'
df
start_year_idx
log_scores <- log_score_fcn(
SWStMoMo,
start_years[start_year_idx],
start_years[start_year_idx] + train_length - 1,
10    )
for(fcast_horizon in 1:length(log_scores)){
df <- df %>% add_row(
Country = country,
first_year_train = start_years[start_year_idx],
last_year_train = start_years[start_year_idx] + train_length - 1,
Sex = sex ,
max_age = max_age,
nn_layers = nn_layers,
latent_dim = latent_dim,
'Forecast horizon' = fcast_horizon,
'Log score' = log_scores[fcast_horizon],
Date = format(Sys.time(), "%d/%M/%Y"),
Time = format(Sys.time(), "%X")
)
}
df
write_csv(df, 'logScoreOtherModels.csv' )
write_csv(df, 'logScoreOtherModels.csv' )
write_csv(df, 'logScoreOtherModels.csv' , append = TRUE)
get_empty_df <- function(){}
df <- get_empty_df()
df
get_empty_df <- function(){
df <- tibble(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
'Forecast horizon' = numeric(),
'Log score' = numeric(),
Date = character(),
Time = character()
)
}
df <- get_empty_df()
df
df <- tibble(
Country = character(),
first_year_train = numeric(),
last_year_train = numeric(),
Sex = character() ,
max_age = numeric(),
nn_layers = numeric(),
latent_dim = numeric(),
'Forecast horizon' = numeric(),
'Log score' = numeric(),
Date = character(),
Time = character()
)
source("~/Library/CloudStorage/Box-Box/research/mortalityForecasting2_1/momo/momo.R")
(10^-5)^(1/50000)
0.999^50000
0.9999^50000
0.1*0.9999^50000
0.99^1000
0.1^(1/200)
0.99^200
